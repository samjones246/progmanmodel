machine m6_core
refines m5_semesters
sees c5_semesters
variables
	registered
	logged_in
	programmes
	programme_leader
	administrators
	modules
	contains_module
	module_leader
	module_outcomes
	programme_outcomes
	outcome_mapping
	prerequisites
	programme_duration
	module_semester
	module_year
	core
	credits_awarded
	published
invariants
	@inv61: core ∈ programmes ↔ modules
	@inv62: core ⊆ contains_module
	@inv63: ∀p,m · p ∈ published ∧ m ∈ core[{p}] ⇒  prerequisites[{m}] ⊆  core[{p}]
events
	event INITIALISATION extends INITIALISATION
	then
		@act61: core ≔ ∅
	end

	event set_core
	any
		u
		p
		m
	where
		@grd1: p ∈ programmes
		@grd2: m ∈ modules
		@grd3: u ∈ logged_in
		@grd4: u ∈ administrators[{p}]
		@grd5: m ∈ contains_module[{p}]
		@grd6: m ∉  core[{p}]
		@grd7: p ∉  published
	then
		@act1: core ≔ core ∪ {p↦m}
	end

	event set_optional
	any
		u
		p
		m
	where
		@grd1: p ∈ programmes
		@grd2: m ∈ modules
		@grd3: u ∈ logged_in
		@grd4: u ∈ administrators[{p}]
		@grd5: m ∈ contains_module[{p}]
		@grd6: m ∈  core[{p}]
		@grd7: p ∉ published
	then
		@act1: core ≔ core  ∖ {p↦m}
	end

	event publish_programme extends publish_programme
	where
		@grd61: ∀m · m ∈ core[{p}] ⇒  prerequisites[{m}] ⊆ core[{p}]
	end

	event unpublish_programme extends unpublish_programme
	end

	event change_semester extends change_semester
	end

	event change_year extends change_year
	end

	event change_duration extends change_duration
	end

	event assign_prerequisite extends assign_prerequisite
	where
		@grd61: m1 ∉ core[published]
	end

	event unassign_prerequisite extends unassign_prerequisite
	end

	event assign_programme_outcome extends assign_programme_outcome
	end

	event unassign_programme_outcome extends unassign_programme_outcome
	end

	event assign_module_outcome extends assign_module_outcome
	end

	event unassign_module_outcome extends unassign_module_outcome
	end

	event map_outcome extends map_outcome
	end

	event unmap_outcome extends unmap_outcome
	end

	event create_module extends create_module
	end

	event delete_module extends delete_module
	then
		@act61: core ≔ core ⩥ {m}
	end

	event assign_module extends assign_module
	end

	event unassign_module extends unassign_module
	then
		@act61: core ≔ core ∖ {p↦m}
	end

	event transfer_module_ownership extends transfer_module_ownership
	end

	event create_programme extends create_programme
	end

	event delete_programme extends delete_programme
	then
		@act61: core ≔  {p} ⩤ core
	end

	event add_administrator extends add_administrator
	end

	event remove_administrator extends remove_administrator
	end

	event transfer_ownership extends transfer_ownership
	end

	event register extends register
	end

	event unregister extends unregister
	end

	event login extends login
	end

	event logout extends logout
	end

end